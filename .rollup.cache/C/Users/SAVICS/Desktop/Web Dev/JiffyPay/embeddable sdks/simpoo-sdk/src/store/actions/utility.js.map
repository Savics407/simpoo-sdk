{"version":3,"file":"utility.js","sourceRoot":"","sources":["utility.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,gBAAgB,CAC9B,KAAa,EACb,QAAQ,GAAG,KAAK,EAChB,MAAM,GAAG,OAAO;IAEhB,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;QACjB,KAAK,GAAG,CAAC,CAAC,CAAC,sBAAsB;IACnC,CAAC;IAED,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;QAC9C,KAAK,EAAE,UAAU;QACjB,QAAQ,EAAE,QAAQ;QAClB,qBAAqB,EAAE,CAAC;QACxB,qBAAqB,EAAE,CAAC;KACzB,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,SAAwB,CAAC;IACzD,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS;QAAE,OAAO,GAAG,CAAC;IAExD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QACnB,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChE,MAAM,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;QACrE,OAAO,WAAW,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,WAAW,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;IACnE,CAAC;SAAM,CAAC;QACN,OAAO,GAAG,CAAC;IACb,CAAC;AACH,CAAC","sourcesContent":["export function formatToCurrency(\r\n  value: number,\r\n  currency = \"NGN\",\r\n  locale = \"en-NG\"\r\n) {\r\n  if (isNaN(value)) {\r\n    value = 0; // Set NaN values to 0\r\n  }\r\n\r\n  const formatter = new Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 6,\r\n  });\r\n\r\n  return formatter.format(value);\r\n}\r\n\r\nexport function addCommasToNumber(number: number | null = 0) {\r\n  if (number === null || number === undefined) return \"0\";\r\n\r\n  if (!isNaN(number)) {\r\n    const [integerPart, decimalPart] = number.toString().split(\".\");\r\n    const withCommas = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return decimalPart ? `${withCommas}.${decimalPart}` : withCommas;\r\n  } else {\r\n    return \"0\";\r\n  }\r\n}\r\n"]}