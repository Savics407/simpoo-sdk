{"version":3,"file":"Table.js","sourceRoot":"","sources":["Table.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  flexRender,\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  type ColumnDef,\r\n} from \"@tanstack/react-table\";\r\n\r\nimport {\r\n  Table as ShadTable,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"../ui/table\";\r\nimport React, { ReactNode, useState } from \"react\";\r\nimport { Skeleton } from \"../ui/skeleton\";\r\nimport { cn } from \"../../lib/utils\";\r\nimport PaginationComponent, { Meta } from \"./pagination-component\";\r\nimport { icons } from \"../../assets/icons\";\r\nimport ItemEmpty, { Emptyprops } from \"./ItemEmpty\";\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  tbhRowClass?: string;\r\n  tHeadClass?: string;\r\n  tbCellClass?: string;\r\n  meta?: Meta;\r\n  showBulkActions?: boolean;\r\n  showPaginate?: boolean;\r\n  emptyData?: boolean;\r\n  emptyProps?: Emptyprops;\r\n  loading?: boolean;\r\n  //   actions?: Action[];\r\n  //   moreOptions?: DropDownOption[];\r\n  hasAccordion?: boolean;\r\n  accordionData?: (row: TData) => ReactNode;\r\n  bodyRowClass?: string;\r\n  tableContainerClass?: string;\r\n  firstCellClass?: string;\r\n  lastCellClass?: string;\r\n  showAccordionDropdown?: boolean;\r\n  onToggleAccordion?: (index: number, row: TData) => void;\r\n}\r\n\r\nexport function Table<TData, TValue>({\r\n  columns,\r\n  data,\r\n  tbhRowClass,\r\n  tHeadClass,\r\n  tbCellClass,\r\n  meta,\r\n  showBulkActions,\r\n  showPaginate = true,\r\n  emptyData,\r\n  emptyProps,\r\n  loading,\r\n  //   actions,\r\n  //   moreOptions,\r\n  accordionData,\r\n  hasAccordion,\r\n  bodyRowClass,\r\n  tableContainerClass,\r\n  firstCellClass,\r\n  lastCellClass,\r\n  showAccordionDropdown = true,\r\n  onToggleAccordion,\r\n}: DataTableProps<TData, TValue>) {\r\n  const [openRowIndex, setOpenRowIndex] = useState<number | null>(null);\r\n\r\n  // const [rowSelection, setRowSelection] = useState<any>({});\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    // onRowSelectionChange: setRowSelection,\r\n  });\r\n\r\n  const toggleAccordion = (index: number, row: TData) => {\r\n    setOpenRowIndex((prev) => (prev === index ? null : index));\r\n    onToggleAccordion?.(index, row);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-[30px]\">\r\n      <div className={`shadow-[0_3px_4px_0_#00000008] ${tableContainerClass}`}>\r\n        <ShadTable>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow\r\n                key={headerGroup.id}\r\n                className={cn(\r\n                  \"border-gray-300 bg-gray-100 hover:!bg-gray-100 rounded-xl\",\r\n                  tbhRowClass\r\n                )}\r\n              >\r\n                {headerGroup.headers.map((header) => (\r\n                  <TableHead\r\n                    key={header.id}\r\n                    className={cn(\r\n                      \"text-dark text-sm capitalize font-bold\",\r\n                      tHeadClass\r\n                    )}\r\n                  >\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                  </TableHead>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {loading ? (\r\n              Array(5)\r\n                .fill(null)\r\n                .map((_, index) => (\r\n                  <React.Fragment key={index}>\r\n                    {table.getHeaderGroups().map((headerGroup) => (\r\n                      <TableRow\r\n                        key={headerGroup.id}\r\n                        className={cn(\r\n                          \"border-gray-300 hover:!bg-gray-100 rounded-xl\"\r\n                        )}\r\n                      >\r\n                        {headerGroup.headers.map((header) => {\r\n                          return (\r\n                            <TableCell key={header.id}>\r\n                              <Skeleton className=\"w-full h-6 rounded-lg\" />\r\n                            </TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    ))}\r\n                  </React.Fragment>\r\n                ))\r\n            ) : table?.getRowModel().rows?.length ? (\r\n              table?.getRowModel().rows.map((row, i) => (\r\n                <React.Fragment key={row.id}>\r\n                  <TableRow\r\n                    onClick={() => toggleAccordion(i, row.original)}\r\n                    key={row.id}\r\n                    data-state={row.getIsSelected() && \"selected\"}\r\n                    className={`border-gray-300 hover:!bg-gray-100 data-[state=selected]:bg-gray-100 ${bodyRowClass} `}\r\n                  >\r\n                    {row.getVisibleCells().map((cell, index) => (\r\n                      <TableCell\r\n                        key={cell.id}\r\n                        className={cn(\r\n                          \"text-gray-500  text-sm font-bold\",\r\n                          tbCellClass,\r\n                          index === 0 && firstCellClass,\r\n                          index === row.getVisibleCells().length - 1 &&\r\n                            lastCellClass\r\n                        )}\r\n                      >\r\n                        <div className=\"flex\">\r\n                          {hasAccordion &&\r\n                            showAccordionDropdown &&\r\n                            index === 0 && (\r\n                              <div className=\"cursor-pointer inline\">\r\n                                <div\r\n                                  className={`transform transition-transform duration-200 ${\r\n                                    openRowIndex === i\r\n                                      ? \"-rotate-90\"\r\n                                      : \"rotate-90\"\r\n                                  }`}\r\n                                >\r\n                                  {icons.arrow}\r\n                                </div>\r\n                              </div>\r\n                            )}{\" \"}\r\n                          <div>\r\n                            {flexRender(\r\n                              cell.column.columnDef.cell,\r\n                              cell.getContext()\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                  {/* {hasAccordion && (\r\n                        <TableRow className=\"hover:bg-gray-50\">\r\n                          <TableCell colSpan={columns.length} className=\"p-0\">\r\n                            <Collapse isOpened={openRowIndex === i}>\r\n                              <div className=\"p-4 bg-gray-50 rounded-xl mt-5\">\r\n                                {accordionData\r\n                                  ? accordionData(row.original)\r\n                                  : null}\r\n                              </div>\r\n                            </Collapse>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )} */}\r\n                </React.Fragment>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell\r\n                  colSpan={columns.length}\r\n                  className=\"h-24 text-center hover:bg-gray-100\"\r\n                >\r\n                  {emptyData ? (\r\n                    <ItemEmpty props={emptyProps} />\r\n                  ) : (\r\n                    \"No results found.\"\r\n                  )}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </ShadTable>\r\n      </div>\r\n\r\n      {showPaginate && (\r\n        <PaginationComponent showBulkActions={showBulkActions} meta={meta} />\r\n      )}\r\n\r\n      {/* <SelectedAction\r\n        selectedRows={table.getFilteredSelectedRowModel().rows}\r\n        toggle={() => table.toggleAllPageRowsSelected(false)}\r\n        actions={actions}\r\n        moreOptions={moreOptions}\r\n      /> */}\r\n    </div>\r\n  );\r\n}\r\n"]}