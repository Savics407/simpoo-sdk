{"version":3,"file":"SimpooProvider.js","sourceRoot":"","sources":["SimpooProvider.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAMzE,MAAM,UAAU,GAAG,aAAa,CAAyB,IAAI,CAAC,CAAC;AAE/D,MAAM,CAAC,MAAM,MAAM,GAAG,GAAG,EAAE;IACzB,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;IACvC,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IACxE,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAOF,MAAM,CAAC,MAAM,cAAc,GAA+B,CAAC,EACzD,MAAM,EACN,QAAQ,GACT,EAAE,EAAE;IACH,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,CAAC,WAAW;IAC1B,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAClC,GAAG,EAAE,CACH,IAAI,WAAW,CAAC;QACd,cAAc,EAAE;YACd,OAAO,EAAE;gBACP,oBAAoB,EAAE,KAAK,EAAE,qCAAqC;aACnE;SACF;KACF,CAAC,CACL,CAAC;IAEF,OAAO,CACL,KAAC,UAAU,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,MAAM,EAAE,YACpC,KAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,YACpB,KAAC,mBAAmB,IAAC,MAAM,EAAE,WAAW,YACrC,QAAQ,GACW,GACb,GACS,CACvB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["\"use client\";\r\n\r\nimport React, { createContext, useContext } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"../store\";\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\n\r\ninterface SDKContextProps {\r\n  apiKey: string;\r\n}\r\n\r\nconst SDKContext = createContext<SDKContextProps | null>(null);\r\n\r\nexport const useSDK = () => {\r\n  const context = useContext(SDKContext);\r\n  if (!context) throw new Error(\"useSDK must be used within SDKProvider\");\r\n  return context;\r\n};\r\n\r\ninterface SDKProviderProps {\r\n  apiKey: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const SimpooProvider: React.FC<SDKProviderProps> = ({\r\n  apiKey,\r\n  children,\r\n}) => {\r\n  if (typeof window === \"undefined\") {\r\n    return null; // SSR-safe\r\n  }\r\n\r\n  const [queryClient] = React.useState(\r\n    () =>\r\n      new QueryClient({\r\n        defaultOptions: {\r\n          queries: {\r\n            refetchOnWindowFocus: false, // this stops the reload on tab focus\r\n          },\r\n        },\r\n      })\r\n  );\r\n\r\n  return (\r\n    <SDKContext.Provider value={{ apiKey }}>\r\n      <Provider store={store}>\r\n        <QueryClientProvider client={queryClient}>\r\n          {children}\r\n        </QueryClientProvider>\r\n      </Provider>\r\n    </SDKContext.Provider>\r\n  );\r\n};\r\n"]}